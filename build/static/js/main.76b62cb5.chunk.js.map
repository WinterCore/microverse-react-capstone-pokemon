{"version":3,"sources":["components/pokemon.module.css","utility.module.css","components/header.module.css","components/filter.module.css","components/loader.module.css","store/filter/index.ts","api/endpoints.ts","api/index.ts","store/utils.ts","store/pokemon/actions.ts","store/pokemon/index.ts","store/filter/actions.ts","utils.ts","store/pokemon-types/actions.ts","store/pokemon-types/index.ts","store/pokemon-type/actions.ts","store/pokemon-type/index.ts","store/root.ts","store/index.ts","components/pokemon-grid-item.tsx","components/loader.tsx","components/api-resource-renderer.tsx","components/pokemon-grid.tsx","components/filter.tsx","components/pokemon-sort.tsx","routes/index.tsx","components/pokemon.tsx","routes/pokemon.tsx","assets/pokeball.png","components/header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SortFilter","POKEMON_ART_BASE_URL","id","GET_TYPE","method","url","GET_POKEMON","api","Axios","create","baseURL","headers","createAction","type","payload","FETCH_POKEMON","FETCH_POKEMON_ERROR","FETCH_POKEMON_SUCCESS","fetch","dispatch","a","undefined","Api","data","INITIAL_STATE","isLoading","error","pokemonReducer","state","action","CHANGE_SORT_FILTER","changeSort","sort","Default","filterReducer","rawAction","capitalize","str","charAt","toUpperCase","slice","extractIdFromUrl","urlType","idx","indexOf","match","exec","length","groups","FETCH_POKEMON_TYPES","FETCH_POKEMON_TYPES_ERROR","FETCH_POKEMON_TYPES_SUCCESS","formatted","results","map","name","FETCH_POKEMON_TYPE","FETCH_POKEMON_TYPE_ERROR","FETCH_POKEMON_TYPE_SUCCESS","pokemon","POKEMON_INITIAL_STATE","pokemonTypes","POKEMON_TYPES_INITIAL_STATE","pokemonType","POKEMON_TYPE_INITIAL_STATE","filter","FILTER_INITIAL_STATE","createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","configureStore","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","reduxThunk","connect","className","utilStyles","card","cardTitle","alt","src","classnames","cardFooter","flex","justifyCenter","to","button","Loader","color","width","data-testid","styles","loaderContainer","version","xmlns","xmlnsXlink","x","y","style","loader","viewBox","xmlSpace","fill","d","attributeType","attributeName","from","dur","repeatCount","ApiResourceRenderer","loaderWidth","empty","render","errorHeading","infoHeading","bindActionCreators","fetchType","queryString","parse","location","search","React","useEffect","pokemons","Asc","b","localeCompare","Desc","pokemonSorter","itemsGrid","FilterItem","active","stringify","listItem","types","fetchTypes","bannerTitle","green","listContainer","props","ml1","mb3","mr2","bold","onChange","e","target","value","select","Index","main","mainContent","container","mainContainer","mr3","Pokemon","height","stats","imageContainer","contentContainer","contentSection","i","base_stat","stat","definition","badge","matchSelector","createMatchSelector","params","Header","descriptionBar","topHeader","column","alignCenter","sign","logo","signText","store","App","wideBannerSection","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76b62cb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"pokemon_container__ggymF\",\"imageContainer\":\"pokemon_imageContainer__HzlC8\",\"contentContainer\":\"pokemon_contentContainer__1OzdQ\",\"contentSection\":\"pokemon_contentSection__2Ovst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"utility_flex__3suv1\",\"row\":\"utility_row__3jPgA\",\"column\":\"utility_column__3z7Oy\",\"justifyCenter\":\"utility_justifyCenter__28FCx\",\"justifyStart\":\"utility_justifyStart__1qjrd\",\"justifyEnd\":\"utility_justifyEnd__18BeD\",\"justifyBetween\":\"utility_justifyBetween__1GzNe\",\"alignCenter\":\"utility_alignCenter__HEKea\",\"alignStart\":\"utility_alignStart__174eH\",\"alignEnd\":\"utility_alignEnd__IKh-P\",\"container\":\"utility_container__3nFDQ\",\"itemsGrid\":\"utility_itemsGrid__VyOLO\",\"relative\":\"utility_relative__2R1XQ\",\"main\":\"utility_main__3_u_K\",\"mainContent\":\"utility_mainContent__GIUlA\",\"card\":\"utility_card__1JeGk\",\"cardTitle\":\"utility_cardTitle__2ZQb3\",\"cardFooter\":\"utility_cardFooter__2Oi_M\",\"button\":\"utility_button__1f9SO\",\"bannerTitle\":\"utility_bannerTitle__t58tZ\",\"green\":\"utility_green__1qtZt\",\"red\":\"utility_red__39vb-\",\"errorHeading\":\"utility_errorHeading__rciRF\",\"infoHeading\":\"utility_infoHeading__2B3M4\",\"wideBannerSection\":\"utility_wideBannerSection__2Mb8u\",\"mainContainer\":\"utility_mainContainer__2halc\",\"definition\":\"utility_definition__dvWNq\",\"badge\":\"utility_badge__2i2Ay\",\"select\":\"utility_select__2uRWa\",\"bold\":\"utility_bold__2gvnS\",\"mr1\":\"utility_mr1__2BIB9\",\"mr2\":\"utility_mr2__1jwFx\",\"mr3\":\"utility_mr3__1mK1t\",\"ml1\":\"utility_ml1__V6tOY\",\"ml2\":\"utility_ml2__2dADL\",\"ml3\":\"utility_ml3__21Pf5\",\"mb1\":\"utility_mb1__AFarV\",\"mb2\":\"utility_mb2__1jmXk\",\"mb3\":\"utility_mb3__3MtmX\",\"mt1\":\"utility_mt1__SbvXN\",\"mt2\":\"utility_mt2__3l4yf\",\"mt3\":\"utility_mt3__1Qefm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBar\":\"header_descriptionBar__VYTdA\",\"topHeader\":\"header_topHeader__34qwt\",\"sign\":\"header_sign__2-VNL\",\"signText\":\"header_signText__2oET-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContainer\":\"filter_listContainer__3JVOb\",\"listItem\":\"filter_listItem__3DYyp\",\"active\":\"filter_active__1jC4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderContainer\":\"loader_loaderContainer__231i2\",\"loader\":\"loader_loader__beBX3\"};","import { AnyAction, Reducer } from 'redux';\n\nimport { CHANGE_SORT_FILTER, ActionUnion } from './actions';\n\nexport enum SortFilter {\n    Default,\n    Asc,\n    Desc\n};\n\nexport type FilterState = { sort: SortFilter };\n\nexport const INITIAL_STATE: FilterState = {\n    sort: SortFilter.Default,\n};\n\nconst filterReducer: Reducer<FilterState> = (state: FilterState = INITIAL_STATE, rawAction: AnyAction) => {\n    const action = rawAction as ActionUnion;\n    switch (action.type) {\n        case CHANGE_SORT_FILTER:\n            return { sort: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport default filterReducer;\n","import { AxiosRequestConfig } from 'axios';\n\ntype ARC = AxiosRequestConfig;\n\nexport const API_URL = 'https://pokeapi.co/api/v2';\n\nexport const POKEMON_ART_BASE_URL =\n    (id: number) => `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;\n\nexport const GET_TYPES   = (): ARC => ({ method: 'GET', url: '/type' });\nexport const GET_TYPE    = (id: number): ARC => ({ method: 'GET', url : `/type/${id}` });\n\nexport const GET_POKEMON  = (id: number): ARC => ({ method: 'GET', url : `/pokemon/${id}` });\nexport const GET_POKEMONS = (): ARC => ({ method: 'GET', url : '/pokemon' });\n","import Axios from \"axios\";\n\nimport { API_URL } from './endpoints';\n\nexport * from './endpoints';\n\nconst api = Axios.create({\n    baseURL : API_URL,\n    headers : {}\n});\n\nexport default api;\n","export interface Action<T, S> {\n    type    : T;\n    payload : S;\n};\n\nexport const createAction =\n    <T, S>(type: T, payload: S): Action<T, S> => ({ type, payload });\n\n\nexport type ApiResourceState<T> = {\n    isLoading : boolean;\n    error     : string | null;\n    data      : T | null;\n};\n","import { Dispatch }      from 'redux';\nimport { AxiosResponse } from 'axios';\n\nimport Api, { GET_POKEMON }   from '../../api/index';\nimport { createAction }       from '../utils';\nimport { GetPokemonResponse } from '../../api/responses';\n\nexport const FETCH_POKEMON         = 'FETCH_POKEMON';\nexport const FETCH_POKEMON_ERROR   = 'FETCH_POKEMON_ERROR';\nexport const FETCH_POKEMON_SUCCESS = 'FETCH_POKEMON_SUCCESS';\n\nexport type FetchPokemon = {\n    type : typeof FETCH_POKEMON;\n};\n\nexport type FetchPokemonSuccess = {\n    type    : typeof FETCH_POKEMON_SUCCESS;\n    payload : GetPokemonResponse;\n};\n\nexport type FetchPokemonError = {\n    type    : typeof FETCH_POKEMON_ERROR;\n    payload : string;\n};\n\nexport type ActionUnion = FetchPokemon | FetchPokemonSuccess | FetchPokemonError;\n\nexport const fetch = (id: number) =>\n    async (dispatch: Dispatch<ActionUnion>): Promise<void> => {\n        dispatch(createAction<typeof FETCH_POKEMON, undefined>(FETCH_POKEMON, undefined));\n        try {\n            const { data }: AxiosResponse<GetPokemonResponse> = await Api(GET_POKEMON(id));\n            dispatch(createAction<typeof FETCH_POKEMON_SUCCESS, GetPokemonResponse>(FETCH_POKEMON_SUCCESS, data));\n        } catch (e) {\n            dispatch(createAction<typeof FETCH_POKEMON_ERROR, string>(FETCH_POKEMON_ERROR, 'Something happened'));\n        }\n    };\n","import { Reducer } from 'redux';\n\nimport { GetPokemonResponse } from '../../api/responses';\nimport { ApiResourceState }   from '../utils';\n\nimport { FETCH_POKEMON, FETCH_POKEMON_ERROR, FETCH_POKEMON_SUCCESS, ActionUnion } from './actions';\n\nexport type PokemonState = ApiResourceState<GetPokemonResponse | null>;\n\nexport const INITIAL_STATE: PokemonState = {\n    data      : null,\n    isLoading : false,\n    error     : null,\n};\n\nconst pokemonReducer: Reducer<PokemonState> = (state: PokemonState = INITIAL_STATE, action: ActionUnion) => {\n    switch (action.type) {\n        case FETCH_POKEMON:\n            return { data: null, isLoading: true, error: null };\n        case FETCH_POKEMON_SUCCESS:\n            return { data: action.payload, isLoading: false, error: null };\n        case FETCH_POKEMON_ERROR:\n            return { data: null, isLoading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport default pokemonReducer;\n","import { createAction } from '../utils';\n\nimport { SortFilter } from './index';\n\nexport const CHANGE_SORT_FILTER = 'CHANGE_FILTER';\n\nexport type ChangeFilter = {\n    type    : typeof CHANGE_SORT_FILTER;\n    payload : SortFilter;\n};\n\nexport type ActionUnion = ChangeFilter;\n\nexport const changeSort = (sort: SortFilter) => createAction<typeof CHANGE_SORT_FILTER, SortFilter>(CHANGE_SORT_FILTER, sort);\n","import { NamedApiResource } from './api/models';\nimport { SortFilter }       from './store/filter/index';\n\nexport const capitalize = (str: string) => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n\n\nexport const pokemonSorter = (pokemons: NamedApiResource[], filter: SortFilter) => {\n    switch (filter) {\n    case SortFilter.Asc:\n        return pokemons.sort((a, b) => a.name.localeCompare(b.name));\n    case SortFilter.Desc:\n        return pokemons.sort((a, b) => b.name.localeCompare(a.name));\n    default:\n        return pokemons;\n    }\n};\n\nexport const extractIdFromUrl = (urlType: string, str: string): number => {\n    const idx = str.indexOf(urlType);\n    const match  = /^\\/(?<id>\\d+)\\/?/.exec(str.slice(idx + urlType.length));\n    if (!match || !match.groups) {\n        return -1;\n    }\n    return +match.groups.id;\n};\n","import { Dispatch }      from 'redux';\nimport { AxiosResponse } from 'axios';\n\nimport Api, { GET_TYPES }                      from '../../api/index';\nimport { createAction }                        from '../utils';\nimport { GetPokemonTypesResponse }             from '../../api/responses';\nimport { NamedApiResource, PaginatedResource } from '../../api/models';\nimport { extractIdFromUrl }                    from '../../utils';\n\nexport const FETCH_POKEMON_TYPES         = 'FETCH_POKEMON_TYPES';\nexport const FETCH_POKEMON_TYPES_ERROR   = 'FETCH_POKEMON_TYPES_ERROR';\nexport const FETCH_POKEMON_TYPES_SUCCESS = 'FETCH_POKEMON_TYPES_SUCCESS';\n\nexport type FetchPokemonTypes = {\n    type : typeof FETCH_POKEMON_TYPES;\n};\n\nexport type FetchPokemonTypesSuccess = {\n    type    : typeof FETCH_POKEMON_TYPES_SUCCESS;\n    payload : PaginatedResource<NamedApiResource[]>;\n};\n\nexport type FetchPokemonTypesError = {\n    type    : typeof FETCH_POKEMON_TYPES_ERROR;\n    payload : string;\n};\n\nexport type ActionUnion = FetchPokemonTypes | FetchPokemonTypesSuccess | FetchPokemonTypesError;\n\nexport const fetch = () =>\n    async (dispatch: Dispatch<ActionUnion>): Promise<void> => {\n        dispatch(createAction<typeof FETCH_POKEMON_TYPES, undefined>(FETCH_POKEMON_TYPES, undefined));\n        try {\n            const { data }: AxiosResponse<GetPokemonTypesResponse> = await Api(GET_TYPES());\n            const formatted: PaginatedResource<NamedApiResource[]> = {\n                ...data,\n                results: data.results.map(({ url, name }) => ({ name, id: extractIdFromUrl('/type', url) }))\n            };\n\n            dispatch(createAction<typeof FETCH_POKEMON_TYPES_SUCCESS, PaginatedResource<NamedApiResource[]>>(FETCH_POKEMON_TYPES_SUCCESS, formatted));\n        } catch (e) {\n            dispatch(createAction<typeof FETCH_POKEMON_TYPES_ERROR, string>(FETCH_POKEMON_TYPES_ERROR, 'Something happened'));\n        }\n    };\n","import { Reducer } from 'redux';\n\nimport { NamedApiResource, PaginatedResource } from '../../api/models';\nimport { ApiResourceState }                    from '../utils';\n\nimport { FETCH_POKEMON_TYPES, FETCH_POKEMON_TYPES_ERROR, FETCH_POKEMON_TYPES_SUCCESS, ActionUnion } from './actions';\n\nexport type PokemonTypesState = ApiResourceState<PaginatedResource<NamedApiResource[]>  | null> ;\n\nexport const INITIAL_STATE: PokemonTypesState = {\n    data      : null,\n    isLoading : false,\n    error     : null,\n};\n\nconst pokemonReducer: Reducer<PokemonTypesState> = (state: PokemonTypesState = INITIAL_STATE, action: ActionUnion) => {\n    switch (action.type) {\n        case FETCH_POKEMON_TYPES:\n            return { data: null, isLoading: true, error: null };\n        case FETCH_POKEMON_TYPES_SUCCESS:\n            return { data: action.payload, isLoading: false, error: null };\n        case FETCH_POKEMON_TYPES_ERROR:\n            return { data: null, isLoading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport default pokemonReducer;\n","import { Dispatch }      from 'redux';\nimport { AxiosResponse } from 'axios';\n\nimport Api, { GET_TYPE, GET_POKEMONS }                 from '../../api/index';\nimport { createAction }                                from '../utils';\nimport { GetPokemonsResponse, GetPokemonTypeResponse } from '../../api/responses';\nimport { NamedApiResource, PokemonType }               from '../../api/models';\nimport { extractIdFromUrl }                            from '../../utils';\n\nexport const FETCH_POKEMON_TYPE         = 'FETCH_POKEMON_TYPE';\nexport const FETCH_POKEMON_TYPE_ERROR   = 'FETCH_POKEMON_TYPE_ERROR';\nexport const FETCH_POKEMON_TYPE_SUCCESS = 'FETCH_POKEMON_TYPE_SUCCESS';\n\nexport type FetchPokemonType = {\n    type : typeof FETCH_POKEMON_TYPE;\n};\n\nexport type FetchPokemonTypeSuccess = {\n    type    : typeof FETCH_POKEMON_TYPE_SUCCESS;\n    payload : PokemonType<NamedApiResource>;\n};\n\nexport type FetchPokemonTypeError = {\n    type    : typeof FETCH_POKEMON_TYPE_ERROR;\n    payload : string;\n};\n\nexport type ActionUnion = FetchPokemonType | FetchPokemonTypeSuccess | FetchPokemonTypeError;\n\nexport const fetch = (id: number) =>\n    async (dispatch: Dispatch<ActionUnion>): Promise<void> => {\n        dispatch(createAction<typeof FETCH_POKEMON_TYPE, undefined>(FETCH_POKEMON_TYPE, undefined));\n        try {\n            if (id === -1) {\n                const { data }: AxiosResponse<GetPokemonsResponse> = await Api(GET_POKEMONS());\n                const formatted: PokemonType<NamedApiResource> = {\n                    id      : -1,\n                    name    : 'All',\n                    pokemon : data.results.map(({ name, url }) => ({ pokemon: { name, id: extractIdFromUrl('/pokemon', url) }}))\n                };\n                dispatch(createAction<typeof FETCH_POKEMON_TYPE_SUCCESS, PokemonType<NamedApiResource>>(FETCH_POKEMON_TYPE_SUCCESS, formatted));\n            } else {\n                const { data }: AxiosResponse<GetPokemonTypeResponse> = await Api(GET_TYPE(id));\n                const formatted: PokemonType<NamedApiResource> = {\n                    ...data,\n                    pokemon: data.pokemon.map(({ pokemon : { name, url } }) => ({ pokemon: { name, id: extractIdFromUrl('/pokemon', url) }}))\n                };\n\n                dispatch(createAction<typeof FETCH_POKEMON_TYPE_SUCCESS, PokemonType<NamedApiResource>>(FETCH_POKEMON_TYPE_SUCCESS, formatted));\n            }\n        } catch (e) {\n            dispatch(createAction<typeof FETCH_POKEMON_TYPE_ERROR, string>(FETCH_POKEMON_TYPE_ERROR, 'Something happened'));\n        }\n    };\n","import { Reducer } from 'redux';\n\nimport { NamedApiResource, PokemonType } from '../../api/models';\nimport { ApiResourceState }              from '../utils';\n\nimport { FETCH_POKEMON_TYPE, FETCH_POKEMON_TYPE_ERROR, FETCH_POKEMON_TYPE_SUCCESS, ActionUnion } from './actions';\n\nexport type PokemonTypeState = ApiResourceState<PokemonType<NamedApiResource> | null>;\n\nexport const INITIAL_STATE: PokemonTypeState = {\n    data      : null,\n    isLoading : false,\n    error     : null,\n};\n\nconst pokemonReducer: Reducer<PokemonTypeState> = (state: PokemonTypeState = INITIAL_STATE, action: ActionUnion) => {\n    switch (action.type) {\n        case FETCH_POKEMON_TYPE:\n            return { data: null, isLoading: true, error: null };\n        case FETCH_POKEMON_TYPE_SUCCESS:\n            return { data: action.payload, isLoading: false, error: null };\n        case FETCH_POKEMON_TYPE_ERROR:\n            return { data: null, isLoading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport default pokemonReducer;\n","import { combineReducers }                from 'redux';\nimport { connectRouter, RouterRootState } from 'connected-react-router';\nimport { History }                        from 'history';\n\nimport pokemon, {\n    PokemonState,\n    INITIAL_STATE as POKEMON_INITIAL_STATE,\n} from './pokemon/index';\n\nimport pokemonTypes, {\n    PokemonTypesState,\n    INITIAL_STATE as POKEMON_TYPES_INITIAL_STATE,\n} from './pokemon-types/index';\n\nimport pokemonType, {\n    PokemonTypeState,\n    INITIAL_STATE as POKEMON_TYPE_INITIAL_STATE\n} from './pokemon-type/index';\n\nimport filter, {\n    FilterState,\n    INITIAL_STATE as FILTER_INITIAL_STATE,\n} from './filter/index';\n\nexport type AppInitialState = {\n    pokemon      : PokemonState;\n    pokemonTypes : PokemonTypesState;\n    pokemonType  : PokemonTypeState;\n    filter       : FilterState;\n};\n\nexport type InitialState = AppInitialState & RouterRootState;\n\nexport const INITIAL_STATE: AppInitialState = {\n    pokemon      : POKEMON_INITIAL_STATE,\n    pokemonTypes : POKEMON_TYPES_INITIAL_STATE,\n    pokemonType  : POKEMON_TYPE_INITIAL_STATE,\n    filter       : FILTER_INITIAL_STATE,\n};\n\nconst createRootReducer = (history: History) => (\n    combineReducers({\n        router: connectRouter(history),\n        pokemonTypes,\n        pokemonType,\n        pokemon,\n        filter,\n    })\n);\n\nexport default createRootReducer;\n","import { createBrowserHistory }                  from 'history';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { routerMiddleware }                      from 'connected-react-router';\nimport reduxThunk                                from 'redux-thunk';\n\nimport createRootReducer, { AppInitialState } from './root';\n\nexport const history = createBrowserHistory();\n\nconst configureStore = (preloadedState: AppInitialState) => (\n    createStore(\n        createRootReducer(history),\n        preloadedState,\n        compose(\n            applyMiddleware(\n                routerMiddleware(history),\n                reduxThunk,\n            ),\n        ),\n    )\n);\n\n\nexport default configureStore;\n","import React       from 'react';\nimport classnames  from 'classnames';\nimport { connect } from 'react-redux';\nimport { Link }    from 'react-router-dom';\n\nimport { POKEMON_ART_BASE_URL } from '../api';\nimport { NamedApiResource }     from '../api/models';\nimport { capitalize }           from '../utils';\n\nimport utilStyles from '../utility.module.css';\n\nconst PokemonGridItem: React.FC<PokemonGridItemProps> = ({ id, name }) => {\n    return (\n        <div className={ utilStyles.card }>\n            <h2 className={ utilStyles.cardTitle }>{ capitalize(name) }</h2>\n            <img alt={ name } src={ POKEMON_ART_BASE_URL(id) } />\n            <div className={ classnames(utilStyles.cardFooter, utilStyles.flex, utilStyles.justifyCenter) }>\n                <Link to={ `/pokemon/${id}` } className={ utilStyles.button }>More Info</Link>\n            </div>\n        </div>\n    );\n};\n\ntype PokemonGridItemProps = NamedApiResource & {};\n\nexport default connect(state => state)(PokemonGridItem);\n","import React from 'react';\n\nimport styles from './loader.module.css';\n\nconst Loader: React.FC<LoaderProps> = ({ color = '#FDCD5E', width = '100%' }) => {\n    return (\n        <div data-testid=\"loader\" className={ styles.loaderContainer }>\n            <svg\n                version=\"1.1\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                x=\"0px\"\n                y=\"0px\"\n                style={{ width }}\n                className={ styles.loader }\n                viewBox=\"0 0 50 50\"\n                xmlSpace=\"preserve\"\n            >\n                <path fill={ color } d=\"M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z\">\n                    <animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 25 25\" to=\"360 25 25\" dur=\"0.6s\" repeatCount=\"indefinite\"></animateTransform>\n                </path>\n            </svg>\n        </div>\n    );\n};\n\ntype LoaderProps = {\n    color ?: string;\n    width ?: number | string;\n}\n\nexport default Loader;\n","import React from 'react';\n\nimport Loader from './loader';\n\nimport utilStyles from '../utility.module.css';\n\nconst ApiResourceRenderer: React.FC<ApiResourceRendererProps> = ({ isLoading, loaderWidth, error, empty, render }) => {\n    if (isLoading) {\n        return <Loader width={ loaderWidth } />;\n    }\n\n    if (error) {\n        return <h2 className={ utilStyles.errorHeading }>Something happened!</h2>;\n    }\n\n    if (empty) {\n        return <h2 className={ utilStyles.infoHeading }>No items were found!</h2>;\n    }\n\n    return render();\n};\n\ntype ApiResourceRendererProps = {\n    isLoading   : boolean;\n    loaderWidth : string | number;\n    error       : string | null;\n    empty       : boolean;\n    render      : () => React.ReactElement | null;\n};\n\nexport default ApiResourceRenderer;\n","import React                            from 'react';\nimport { connect }                      from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { RouterRootState }              from 'connected-react-router';\nimport queryString                      from 'query-string';\n\nimport { PokemonTypeState } from '../store/pokemon-type/index';\nimport { fetch }            from '../store/pokemon-type/actions';\nimport { InitialState }     from '../store/root';\nimport { FilterState }      from '../store/filter';\n\nimport PokemonGridItem     from './pokemon-grid-item';\nimport ApiResourceRenderer from './api-resource-renderer';\n\nimport utilStyles        from '../utility.module.css';\nimport { pokemonSorter } from '../utils';\n\nconst PokemonGrid: React.FC<PokemonGridProps> = ({ type: { isLoading, data, error }, fetchType, router, filter }) => {\n    const type = +(queryString.parse(router.location.search).type as string) || -1;\n\n    React.useEffect(() => fetchType(type), [type, fetchType]);\n\n    return (\n        <ApiResourceRenderer\n            isLoading={ isLoading || !data }\n            loaderWidth=\"300px\"\n            error={ error }\n            empty={ !data || data.pokemon.length === 0 }\n            render={() => {\n                const pokemons = pokemonSorter(data!.pokemon.slice(0, 20).map(x => x.pokemon), filter.sort);\n\n                return (\n                    <div data-testid=\"pokemonsGrid\" className={ utilStyles.itemsGrid }>\n                        { pokemons.map((pokemon) => <PokemonGridItem key={ pokemon.id } { ...pokemon } />) }\n                    </div>\n                );\n            }}\n        />\n    );\n};\n\ntype Props = {};\n\ntype StateProps = RouterRootState & {\n    type: PokemonTypeState;\n};\n\ntype DispatchProps = {\n    fetchType : (id: number) => void;\n    filter    : FilterState;\n};\n\ntype PokemonGridProps = Props & StateProps & DispatchProps;\n\nconst mapStateToProps = (state: InitialState) => {\n    return ({\n        type   : state.pokemonType,\n        filter : state.filter,\n        router : state.router,\n    });\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ fetchType: fetch }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokemonGrid);\n","import React                            from 'react';\nimport classnames                       from 'classnames';\nimport { Link }                         from 'react-router-dom';\nimport { connect }                      from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { RouterRootState }              from 'connected-react-router';\nimport queryString                      from 'query-string';\n\nimport { NamedApiResource }  from '../api/models';\nimport { InitialState }      from '../store/root';\nimport { PokemonTypesState } from '../store/pokemon-types/index';\nimport { fetch }             from '../store/pokemon-types/actions';\n\nimport ApiResourceRenderer from './api-resource-renderer';\n\nimport styles     from './filter.module.css';\nimport utilStyles from '../utility.module.css';\n\nconst FilterItem: React.FC<FilterItemProps> = ({ id, name, active }) => {\n\n    return (\n        <Link\n            to={ `/?${queryString.stringify({ type: id })}` }\n            key={ id }\n            className={ classnames(styles.listItem, { [styles.active]: active === id }) }\n        >\n            { name }\n        </Link>\n    );\n};\n\ntype FilterItemProps = NamedApiResource & {\n    active: number;\n};\n\nconst Filter: React.FC<FilterProps> = ({ types: { isLoading, data, error }, fetchTypes, router }) => {\n    React.useEffect(() => { fetchTypes() }, [fetchTypes]);\n\n    const type = +(queryString.parse(router.location.search).type as string) || -1;\n\n    return (\n        <div>\n            <h2 className={ classnames(utilStyles.bannerTitle, utilStyles.green) }>Types</h2>\n            <ApiResourceRenderer\n                isLoading={ isLoading }\n                loaderWidth=\"50%\"\n                empty={ !data || data.results.length === 0 }\n                error={ error }\n                render={() => (\n                    <div className={ styles.listContainer }>\n                        {\n                            [{ id: -1, name: 'All' }, ...data!.results]\n                                .map((props) => <FilterItem key={ props.id } active={ type } { ...props } />)\n                        }\n                    </div>\n                )}\n            />\n        </div>\n    );\n};\n\ntype Props = {};\n\ntype StateProps = RouterRootState & {\n    types: PokemonTypesState;\n};\n\ntype DispatchProps = {\n    fetchTypes: () => void;\n};\n\ntype FilterProps = Props & StateProps & DispatchProps;\n\nconst mapStateToProps = (state: InitialState) => {\n    return ({\n        types  : state.pokemonTypes,\n        router : state.router,\n    });\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ fetchTypes: fetch }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React                            from 'react';\nimport classnames                       from 'classnames';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect }                      from 'react-redux';\n\nimport { SortFilter }   from '../store/filter/index';\nimport { changeSort }   from '../store/filter/actions';\nimport { InitialState } from '../store/root';\n\nimport utilStyles from '../utility.module.css';\n\nconst PokemonSort: React.FC<PokemonSortProps> = ({ changeSort, filter }) => {\n    const handleSortFilterChange =\n        (e: React.ChangeEvent<HTMLSelectElement>) => changeSort(+e.target.value);\n\n    return (\n        <div className={ classnames(utilStyles.ml1, utilStyles.mb3) }>\n            <span className={ classnames(utilStyles.mr2, utilStyles.bold) }>Sort</span>\n            <select data-testid=\"sortSelect\" onChange={ handleSortFilterChange } className={ utilStyles.select } value={ filter }>\n                <option value={ SortFilter.Default }>Default</option>\n                <option value={ SortFilter.Asc }>Ascending (A-Z)</option>\n                <option value={ SortFilter.Desc }>Descending (Z-A)</option>\n            </select>\n        </div>\n    );\n};\n\n\ntype Props = {};\n\ntype StateProps = { filter: SortFilter };\n\ntype DispatchProps = { changeSort: (sort: SortFilter) => void };\n\ntype PokemonSortProps = Props & StateProps & DispatchProps;\n\nconst mapStateToProps = (state: InitialState) => ({ filter: state.filter.sort });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ changeSort }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokemonSort);\n","import React       from 'react';\nimport classnames  from 'classnames';\n\nimport PokemonGrid from '../components/pokemon-grid';\nimport Filter      from '../components/filter';\n\nimport PokemonSort from '../components/pokemon-sort';\n\nimport utilStyles from '../utility.module.css';\n\nconst Index: React.FC = () => {\n    return (\n        <main className={ utilStyles.main }>\n            <div className={ classnames(utilStyles.mainContent, utilStyles.container, utilStyles.mainContainer) }>\n                <div className={ utilStyles.mr3 }>\n                    <PokemonSort />\n                    <PokemonGrid />\n                </div>\n                <div>\n                    <Filter />\n                </div>\n            </div>\n        </main>\n    );\n};\n\nexport default Index;\n","import { createMatchSelector, RouterRootState } from 'connected-react-router';\nimport React                                    from 'react';\nimport { bindActionCreators, Dispatch }         from 'redux';\nimport { connect }                              from 'react-redux';\nimport { Link, match }                          from 'react-router-dom';\n\nimport { PokemonState } from '../store/pokemon/index';\nimport { fetch }        from '../store/pokemon/actions';\nimport { InitialState } from '../store/root';\n\nimport ApiResourceRenderer from './api-resource-renderer';\n\nimport { POKEMON_ART_BASE_URL } from '../api';\n\nimport { extractIdFromUrl, capitalize } from '../utils';\n\nimport styles     from './pokemon.module.css';\nimport utilStyles from '../utility.module.css';\n\nconst Pokemon: React.FC<PokemonProps> = ({ pokemon: { data } }) => {\n    const { id, name, types, height, stats } = data!;\n\n    return (\n        <div className={ styles.container }>\n            <div className={ styles.imageContainer }>\n                <img alt={ name } src={ POKEMON_ART_BASE_URL(id) } />\n            </div>\n            <div className={ styles.contentContainer }>\n                <h1>{ capitalize(name) }</h1>\n                <div className={ styles.contentSection }>\n                    <h3>Height</h3>\n                    <div>\n                        { height } Hectograms\n                    </div>\n                </div>\n                <div className={ styles.contentSection }>\n                    <h3>Stats</h3>\n                    <div>\n                        {\n                            stats.map(({ base_stat, stat: { name } }, i) => (\n                                <div key={ i } className={ utilStyles.definition }>\n                                    <span>{ capitalize(name) }</span><span>{ base_stat }</span>\n                                </div>\n                            ))\n                        }\n                    </div>\n                </div>\n                <div className={ styles.contentSection }>\n                    <h3>Types</h3>\n                    <div>\n                        {\n                            types.map(({ type }, i) => (\n                                <Link key={ i } to={ `/?type=${extractIdFromUrl('/type', type.url)}` } className={ utilStyles.badge }>\n                                    { capitalize(type.name) }\n                                </Link>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst PokemonRenderer: React.FC<PokemonProps> = (props) => {\n    const { pokemon: { isLoading, error, data }, fetch, match } = props;\n    const id = match ? +match.params.id : -1;\n\n    React.useEffect(() => fetch(id), [id, fetch]);\n\n    return (\n        <ApiResourceRenderer\n            isLoading={ isLoading || !data }\n            loaderWidth=\"300px\"\n            error={ error }\n            empty={ false }\n            render={() => <Pokemon { ...props } />}\n        />\n    );\n};\n\n\ntype Props = {};\n\ntype StateProps = RouterRootState & {\n    pokemon : PokemonState;\n    match   : match<{ id: string }> | null;\n};\n\ntype DispatchProps = {\n    fetch: (id: number) => void;\n};\n\ntype PokemonProps = Props & StateProps & DispatchProps;\n\nconst mapStateToProps = (state: InitialState) => {\n    const matchSelector = createMatchSelector<RouterRootState, { id: string }>('/pokemon/:id');\n\n    return ({\n        pokemon : state.pokemon,\n        router  : state.router,\n        match   : matchSelector(state),\n    });\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({ fetch }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokemonRenderer);\n","import React      from 'react';\nimport classnames from 'classnames';\n\nimport PokemonView from '../components/pokemon';\n\nimport utilStyles from '../utility.module.css';\n\nconst Pokemon: React.FC = () => {\n    return (\n        <main className={ utilStyles.main }>\n            <div className={ classnames(utilStyles.mainContent, utilStyles.container) }>\n                <PokemonView />\n            </div>\n        </main>\n    );\n};\n\n\nexport default Pokemon;\n","export default __webpack_public_path__ + \"static/media/pokeball.cf919c35.png\";","import React      from 'react';\nimport classnames from 'classnames';\nimport { Link }   from 'react-router-dom';\n\nimport styles     from './header.module.css';\nimport utilStyles from '../utility.module.css';\n\nimport logo from '../assets/pokeball.png';\n\nconst Header: React.FC = () => {\n    return (\n        <header>\n            <div className={ classnames(styles.descriptionBar, utilStyles.flex, utilStyles.justifyCenter) }>\n                <div className={ classnames(utilStyles.container, styles.topHeader) }>\n                    Welcome to Pokepedia, where you can view pokemon types and look at pokemons.\n                    <Link\n                        to=\"/\"\n                        className={ classnames(utilStyles.flex, utilStyles.column, utilStyles.justifyCenter, utilStyles.alignCenter, styles.sign) }\n                    >\n                        <img alt=\"logo\" src={ logo } />\n                        <div className={ styles.signText }>Pokepedia</div>\n                    </Link>\n                </div>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;\n","import { Provider }        from 'react-redux';\nimport { Route, Switch }   from 'react-router';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport configureStore, { history } from './store/index';\nimport { INITIAL_STATE }           from './store/root';\n\nimport Index   from './routes/index';\nimport Pokemon from './routes/pokemon';\n\nimport Header from './components/header';\n\nimport utilStyles from './utility.module.css';\n\nconst store = configureStore(INITIAL_STATE);\n\nconst App = () => (\n    <Provider store={ store }>\n        <ConnectedRouter history={ history }>\n            <Header />\n            <div className={ utilStyles.wideBannerSection } />\n            <Switch>\n                <Route exact path=\"/\" component={ Index } />\n                <Route exact path=\"/pokemon/:id\" component={ Pokemon } />\n            </Switch>\n        </ConnectedRouter>\n    </Provider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React           from 'react';\nimport ReactDOM        from 'react-dom';\n\nimport App             from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}